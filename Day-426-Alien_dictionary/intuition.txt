APPROACH: 
We will apply the BFS(Breadth First Search) traversal technique. Breadth First Search or BFS is a traversal technique where we visit the nodes level-wise, i.e., it visits the same level nodes simultaneously, and then moves to the next level.

INITIAL CONFIGURATION:
Adjacency List: Initially it will be empty and we will create this adjacency list comparing the consecutive pair of words.
Indegree Array: Initially all elements are set to 0. Then, We will count the incoming edges for a node and store it in this array. For example, if the indegree of node 3 is 2, indegree[3] = 2.
Queue: As we will use BFS, a queue is required. Initially, the node with indegree 0 will be pushed into the queue.
Answer array(topo): Initially empty and is used to store the linear ordering.

The ALGORITHM steps are as follows:
1. First, we need to create the adjacency list for the graph. The steps are the following:
    - We will run a loop from the starting index to the second last index because we will check the ith element and the (i+1)th element. 
    - Inside the loop, we will pick two words (the word at the current index(s1) and the word at the next index(s2)). For comparing them, we will again run a loop up to the length of the smallest string.
    - Inside that second loop, if at any index we find inequality (s1[i] != s2[i]), we will add them to the adjacency list (s1[i] —> s2[i]) in terms of numbers(subtracting ‘a’ from them), and then we will immediately come out of the loop. 
    - This is only because we want the first differentiating character. Finally, we will get the adjacency list.
    - In short, we need to find the differentiating character for adjacent strings and create the graph. 
2. Once the graph is created, simply perform a topo sort, whose steps are given below. 
3. Then, we will calculate the indegree of each node and store it in the indegree array. We can iterate through the given adj list, and simply for every node u->v, we can increase the indegree of v by 1 in the indegree array. 
4. Initially, there will be always at least a single node whose indegree is 0. So, we will push the node(s) with indegree 0 into the queue.
5. Then, we will pop a node from the queue including the node in our answer array, and for all its adjacent nodes, we will decrease the indegree of that node by one. For example, if node u that has been popped out from the queue has an edge towards node v(u->v), we will decrease indegree[v] by 1.
6. After that, if for any node the indegree becomes 0, we will push that node again into the queue.
7. We will repeat steps 3 and 4 until the queue is completely empty. Finally, completing the BFS we will get the linear ordering of the nodes in the answer array.
8. For the final answer, we will iterate on the answer array and add each element in terms of character(adding ‘a’ to each of them) to the final string. Then we will return the string as our final answer.