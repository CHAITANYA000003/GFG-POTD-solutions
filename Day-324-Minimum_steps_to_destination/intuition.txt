Since at iteration 'i' we can only take exactly 'i' steps, we can see that taking n iterations will leave us with a set of [1, 2, 3, 4 ..... n] steps. Now our goal is to check if we can achieve our desired sum 'd' by some of the values from this set negative.

For that let us divide our array [1,2,3,4.... n] in two halves: X (positive half) and Y (negative half),
such that: X - Y = d ---------------------------------------------------------------------(i)
E.g. for d = 2, X = [1,3] and Y = [2].

We can also see that: X + Y = (n(n+1)/2) -------------------------------------------------(ii)

On adding (i) and (ii), we would get:
2X = (n(n+1)/2) + d ----------------------------------------------------------------------(iii)
or in other words, (n(n+1)/2) + d should be even,

We should also notice that since Y should be positive (as all the integer in our set [1,2, ...  n] is positive):
(n(n+1)/2) >= d (equality in case if Y is an empty set, i.e Y = [ ]) ---------------------(iv)

Thus, by iterating over [1, 2*d), we need to find a value 'n' which satisfies both of the above equations.